using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace 6_2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Please, enter password");
            string passwordToHash = Console.ReadLine();
            int numberOfRounds = 5 * 10000; // Змінена кількість ітерацій
            AesCipher aesCipher = new AesCipher();
            byte[] hashedPassword = HashPassword(passwordToHash, numberOfRounds);
            aesCipher.Key = hashedPassword;
            while (true)
            {
                Console.WriteLine("Enter data to cipher");
                string data = Console.ReadLine();
                byte[] IV = GenerateRandomBytes(16);
                var aes_encrypted = aesCipher.Encrypt(Encoding.UTF8.GetBytes(data), aesCipher.Key, IV);
                var aes_decrypted = aesCipher.Decrypt(aes_encrypted, aesCipher.Key, IV);
                var aes_decryptedMessage = Encoding.UTF8.GetString(aes_decrypted);
                Console.WriteLine("----------------------");
                Console.WriteLine("AES Encryption in .NET");
                Console.WriteLine();
                Console.WriteLine("Original Text = " + data);
                Console.WriteLine("Encrypted Text = " +
                Convert.ToBase64String(aes_encrypted));
                Console.WriteLine("Decrypted Text = " + aes_decryptedMessage);
                Console.WriteLine("----------------------");
            }
        }

        // Генерує випадкові байти
        private static byte[] GenerateRandomBytes(int length)
        {
            using (var randomNumberGenerator = new RNGCryptoServiceProvider())
            {
                var randomNumber = new byte[length];
                randomNumberGenerator.GetBytes(randomNumber);
                return randomNumber;
            }
        }

        // Код генерації хешу за допомогою PBKDF2
        private static byte[] HashPassword(string passwordToHash, int numberOfRounds)
        {
            byte[] salt = GenerateRandomBytes(32);
            using (var rfc2898 = new Rfc2898DeriveBytes(passwordToHash, salt, numberOfRounds))
            {
                return rfc2898.GetBytes(32);
            }
        }
    }

    // Клас AesCipher з методами шифрування та розшифрування
    public class AesCipher
    {
        public byte[] Key;
        public byte[] Encrypt(byte[] dataToEncrypt, byte[] key, byte[] iv)
        {
            using (var aes = new AesCryptoServiceProvider())
            {
                aes.Mode = CipherMode.CBC;
                aes.Padding = PaddingMode.PKCS7;
                aes.Key = key;
                aes.IV = iv;
                using (var memoryStream = new MemoryStream())
                {
                    var cryptoStream = new CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write);
                    cryptoStream.Write(dataToEncrypt, 0, dataToEncrypt.Length);
                    cryptoStream.FlushFinalBlock();
                    return memoryStream.ToArray();
                }
            }
        }
        public byte[] Decrypt(byte[] dataToDecrypt, byte[] key, byte[] iv)
        {
            using (var aes = new AesCryptoServiceProvider())
            {
                aes.Mode = CipherMode.CBC;
                aes.Padding = PaddingMode.PKCS7;
                aes.Key = key;
                aes.IV = iv;
                using (var memoryStream = new MemoryStream())
                {
                    var cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write);
                    cryptoStream.Write(dataToDecrypt, 0, dataToDecrypt.Length);
                    cryptoStream.FlushFinalBlock();
                    return memoryStream.ToArray();
                }
            }
        }
    }
}
